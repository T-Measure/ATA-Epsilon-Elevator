


pre {
	var restrictedResources = Class.all.select(s|s.getAppliedStereotypes().name.includes("Restricted"));	
	var classes = Class.all;
	var associations = Association.all;
	var usages = Usage.all;
	
	var classConnections = Map{};
	for (association in associations){
		var memberEnds = association.memberEnds.getTypes();
		for (class in memberEnds){
			if (not(classConnections.containsKey(class))){
				classConnections.put(class, OrderedSet{});
			}
			var memberEndsMinusSelf=memberEnds.excluding(class);
			classConnections.get(class).addAll(memberEndsMinusSelf);
		}
	}
		
	for (usage in usages){
		if (not(classConnections.containsKey(usage.client.first()))){
			classConnections.put(usage.client.first(), OrderedSet{});
		}
		classConnections.get(usage.client.first()).add(usage.supplier.first());
	}
}

context Class {
	constraint RestrictedEntrityConnectedToAccessControl {
		guard: self.getAppliedStereotypes().name.includes("Restricted")
		
		check: self.directlyConnectedToAccessControl()  	
		
		message: "///////////ERROR RestrictedEntrityConnectedToAccessControl: The restricted entity "+self.name+
					" is not connected to any access control."
	}
}


operation Class directlyConnectedToAccessControl() : Boolean {	
	for(class: Class in classConnections.get(self)){
		if (class.isInAuthorizationPatterns()){
			return true;
		}
	}
	return false;
}



operation Collection getTypes(): OrderedSet
{
	var types = OrderedSet{};
	for (item in self)
	{
		types.add(item.type);
	}
	
	return types;
}


operation Collection getStereotypes(): OrderedSet
{
	var stereotypes = OrderedSet{};
	for (item in self)
	{
		stereotypes.addAll(item.getAppliedStereotypes().name);
	}
	
	return stereotypes;
}


operation Any isInAuthorizationPatterns() : Boolean {
	
	
	for (stereotype: String in self.getAppliedStereotypes().name){
		if (stereotype.startsWith("RoleBasedAccessControl::")){
			return true;
		}
	}	
  	return false;
}
